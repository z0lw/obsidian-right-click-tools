/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FileMoverPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  targetFolder: "Archive"
};
var FileMoverPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new FileMoverSettingTab(this.app, this));
    // Command palette: create today's folder at vault root
    this.addCommand({
      id: "create-today-folder",
      name: "今日の日付のフォルダを作成",
      callback: () => this.createTodayFolder(this.app.vault.getRoot())
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        const tf = this.settings && this.settings.targetFolder ? this.settings.targetFolder : "";
        const moveLabel = tf ? `「${this.settings.targetFolder}」に移行` : "\u6307\u5B9A\u30D5\u30A9\u30EB\u30C0\u306B\u79FB\u884C";
        menu.addItem((item) => {
          item.setTitle(moveLabel).setIcon("folder-plus").onClick(async () => {
            if (file instanceof import_obsidian.TFile || file instanceof import_obsidian.TFolder) {
              await this.moveFileOrFolder(file);
            }
          });
        });
        // Add: create today's date folder under target folder
        const targetFolder = file instanceof import_obsidian.TFolder ? file : (file && file.parent ? file.parent : this.app.vault.getRoot());
        menu.addItem((item) => {
          item.setTitle("今日の日付のフォルダを作成").setIcon("folder").onClick(async () => {
            await this.createTodayFolder(targetFolder);
          });
        });
      })
    );
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async moveFileOrFolder(file) {
    if (!this.settings.targetFolder) {
      new import_obsidian.Notice("\u79FB\u884C\u5148\u30D5\u30A9\u30EB\u30C0\u304C\u8A2D\u5B9A\u3055\u308C\u3066\u3044\u307E\u305B\u3093\u3002\u8A2D\u5B9A\u304B\u3089\u79FB\u884C\u5148\u30D5\u30A9\u30EB\u30C0\u3092\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044\u3002");
      return;
    }
    try {
      const targetPath = await this.getTargetPath(file);
      if (file instanceof import_obsidian.TFile) {
        await this.moveFile(file, targetPath);
      } else if (file instanceof import_obsidian.TFolder) {
        await this.moveFolder(file, targetPath);
      }
      new import_obsidian.Notice(`${file.name} \u3092 ${this.settings.targetFolder} \u306B\u79FB\u884C\u3057\u307E\u3057\u305F`);
    } catch (error) {
      new import_obsidian.Notice(`\u79FB\u884C\u306B\u5931\u6557\u3057\u307E\u3057\u305F: ${error.message}`);
      console.error("File move error:", error);
    }
  }
  async getTargetPath(file) {
    const relativePath = file.path;
    const targetPath = `${this.settings.targetFolder}/${relativePath}`;
    const targetDir = targetPath.substring(0, targetPath.lastIndexOf("/"));
    await this.ensureDirectoryExists(targetDir);
    return targetPath;
  }
  async ensureDirectoryExists(dirPath) {
    const dirs = dirPath.split("/");
    let currentPath = "";
    for (const dir of dirs) {
      if (!dir)
        continue;
      currentPath += (currentPath ? "/" : "") + dir;
      const existingFolder = this.app.vault.getAbstractFileByPath(currentPath);
      if (!existingFolder) {
        await this.app.vault.createFolder(currentPath);
      }
    }
  }
  async moveFile(file, targetPath) {
    let finalPath = targetPath;
    let counter = 1;
    while (this.app.vault.getAbstractFileByPath(finalPath)) {
      const extension = file.extension ? `.${file.extension}` : "";
      const nameWithoutExt = file.basename;
      const dir = finalPath.substring(0, finalPath.lastIndexOf("/"));
      finalPath = `${dir}/${nameWithoutExt} (${counter})${extension}`;
      counter++;
    }
    await this.app.fileManager.renameFile(file, finalPath);
  }
  async moveFolder(folder, targetPath) {
    let finalPath = targetPath;
    let counter = 1;
    while (this.app.vault.getAbstractFileByPath(finalPath)) {
      const parentDir = finalPath.substring(0, finalPath.lastIndexOf("/"));
      finalPath = `${parentDir}/${folder.name} (${counter})`;
      counter++;
    }
    await this.app.fileManager.renameFile(folder, finalPath);
  }
  formatToday() {
    const now = new Date();
    const yyyy = now.getFullYear();
    const mm = String(now.getMonth() + 1).padStart(2, "0");
    const dd = String(now.getDate()).padStart(2, "0");
    return `${yyyy}-${mm}-${dd}`;
  }
  async createTodayFolder(parent) {
    const parentPath = (parent && parent.path) ? parent.path : "/";
    const baseName = this.formatToday();
    let folderPath = import_obsidian.normalizePath((parentPath === "/" || parentPath === "") ? baseName : `${parentPath}/${baseName}`);
    let suffix = 0;
    while (this.app.vault.getAbstractFileByPath(folderPath)) {
      suffix += 1;
      const name = `${baseName}_${suffix}`;
      folderPath = import_obsidian.normalizePath((parentPath === "/" || parentPath === "") ? name : `${parentPath}/${name}`);
    }
    try {
      await this.app.vault.createFolder(folderPath);
      new import_obsidian.Notice(`作成: ${folderPath}`);
      // Create an untitled note inside the newly created folder
      const untitledBase = "無題のファイル";
      const ext = ".md";
      let notePath = import_obsidian.normalizePath(`${folderPath}/${untitledBase}${ext}`);
      let noteCounter = 1;
      while (this.app.vault.getAbstractFileByPath(notePath)) {
        notePath = import_obsidian.normalizePath(`${folderPath}/${untitledBase} (${noteCounter})${ext}`);
        noteCounter += 1;
      }
      await this.app.vault.create(notePath, "");
      new import_obsidian.Notice(`作成: ${notePath}`);
    } catch (e) {
      console.error(e);
      new import_obsidian.Notice("フォルダ作成に失敗しました。コンソールを確認してください。", 5e3);
    }
  }
};
var FileMoverSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Right-Click Tools Settings" });
    new import_obsidian.Setting(containerEl).setName("\u79FB\u884C\u5148\u30D5\u30A9\u30EB\u30C0").setDesc("\u30D5\u30A1\u30A4\u30EB\u30FB\u30D5\u30A9\u30EB\u30C0\u3092\u79FB\u884C\u3059\u308B\u5148\u306E\u30D5\u30A9\u30EB\u30C0\u540D\u3092\u6307\u5B9A\u3057\u3066\u304F\u3060\u3055\u3044").addText((text) => text.setPlaceholder("Archive").setValue(this.plugin.settings.targetFolder).onChange(async (value) => {
      this.plugin.settings.targetFolder = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("p", {
      text: "\u6CE8\u610F: \u79FB\u884C\u5148\u30D5\u30A9\u30EB\u30C0\u304C\u5B58\u5728\u3057\u306A\u3044\u5834\u5408\u306F\u81EA\u52D5\u7684\u306B\u4F5C\u6210\u3055\u308C\u307E\u3059\u3002\u5143\u306E\u30D5\u30A9\u30EB\u30C0\u69CB\u9020\u306F\u79FB\u884C\u5148\u3067\u3082\u7DAD\u6301\u3055\u308C\u307E\u3059\u3002"
    });
  }
};
